buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = getArtifactID("forge")

minecraft {
    mappings channel: 'official', version: minecraftVersion

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        // We have to have a dummy data run to be parented from
        data {}

        xplatDatagen {
            parent minecraft.runs.data

            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', modID, '--all', '--output', file('../Xplat/src/generated/resources/'), '--existing', file('../Xplat/src/main/resources/')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'bemis.xplat_datagen', 'true'
            mods {
                create(modID) {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        forgeDatagen {
            parent minecraft.runs.data

            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', modID, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'bemis.forge_datagen', 'true'
            mods {
                create(modID) {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }
    }
}


repositories {
    mavenCentral()

    // PAUCAL
    maven { url 'https://maven.blamejared.com' }

    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"
    compileOnly project(":Xplat")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("at.petra-k.paucal:paucal-forge-$minecraftVersion:$paucalVersion")
    runtimeOnly fg.deobf("at.petra-k.paucal:paucal-forge-$minecraftVersion:$paucalVersion")
}

/*
mixin {
    add sourceSets.main, "hexcasting.mixins.refmap.json"
    config "hexplat.mixins.json"
    config "hexcasting_forge.mixins.json"
}
*/

tasks.withType(JavaCompile) {
    source(project(":Xplat").sourceSets.main.allSource)
}

processResources {
    from project(":Xplat").sourceSets.main.resources
}

sourceSets {
    main.resources.srcDirs += ['src/generated/resources', '../Xplat/src/generated/resources']
}

jar.finalizedBy('reobfJar')
setupJar(this)
